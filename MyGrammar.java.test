
import java.util.ArrayList;
import java.util.HashSet;

import computation.contextfreegrammar.ContextFreeGrammar;
import computation.contextfreegrammar.Rule;
import computation.contextfreegrammar.Terminal;
import computation.contextfreegrammar.Variable;
import computation.contextfreegrammar.Word;

public abstract class MyGrammar {

	// this version of the grammar reuses rules where possible (fewer rules gives inefficient code a better
	// chance of running) plus doesn't use subscript variables
	public static ContextFreeGrammar courseworkCNF() {
		Variable S = new Variable('S');
		Variable A = new Variable('A');
		Variable B = new Variable('B');
		Variable C = new Variable('C');
    Variable D = new Variable('D');
    Variable E = new Variable('E');
		Variable F = new Variable('F');

		HashSet<Variable> variables = new HashSet<>();
		variables.add(S);
		variables.add(A);
		variables.add(B);
		variables.add(C);
    variables.add(D);
    variables.add(E);
		variables.add(F);


		Terminal alpha = new Terminal('a');
		Terminal beta = new Terminal('b');


		HashSet<Terminal> terminals = new HashSet<>();
		terminals.add(alpha);
		terminals.add(beta);


		ArrayList<Rule> rules = new ArrayList<>();

		rules.add(new Rule(S, new Word(B, F)));

    rules.add(new Rule(A, new Word(A, A)));
    rules.add(new Rule(A, new Word(C, D)));

		rules.add(new Rule(B, new Word(C, D)));
    rules.add(new Rule(B, new Word(alpha)));

		rules.add(new Rule(C, new Word(alpha)));

    rules.add(new Rule(D, new Word(beta)));

    rules.add(new Rule(F, new Word(B, A)));


		ContextFreeGrammar cfg = new ContextFreeGrammar(variables, terminals, rules, S);
		return cfg;
	}

	public static void main(String...args) {
		ContextFreeGrammar cfg = courseworkCNF();
		System.out.println(cfg);

		assert(cfg.isInChomskyNormalForm());

		assert(cfg.equals(new ContextFreeGrammar(cfg.getRules())));
	}
}